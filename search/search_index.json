{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Readme","text":"<p> <p>Create a full Earth Observation API with Metadata, Raster and Vector services.</p> </p> <p> </p> <p>Documentation: developmentseed.org/eoapi/</p> <p>Source Code: developmentseed/eoAPI</p>"},{"location":"#earth-observation-api","title":"Earth Observation API","text":"<p>The objective of <code>eoAPI</code> is to combine state of the art project to create a full Earth Observation API for Metadata search (STAC), Raster and Feature/Vector services:</p> <ul> <li> <p>pgSTAC database stac-utils/pgstac</p> </li> <li> <p>STAC API built on top of stac-utils/stac-fastapi</p> </li> <li> <p>STAC Items And Mosaic Raster Tiles API built on top of stac-utils/titiler-pgstac</p> </li> <li> <p>OGC Features and Vector Tiles API built on top of developmentseed/tipg</p> </li> </ul> <p>Note: Each service can be used/deployed independently but eoAPI also adds interconnection between them.</p>"},{"location":"#services","title":"Services","text":""},{"location":"#stac-metadata","title":"STAC Metadata","text":"<p>A custom version of stac-fastapi.pgstac application, adding a <code>TiTilerExtension</code> and a simple <code>Search Viewer</code>.</p> <ul> <li> <p>Full stac-fastapi implementation</p> </li> <li> <p>Simple STAC Search viewer</p> </li> <li> <p>Proxy to the Tiler endpoint for STAC Items</p> </li> </ul> <p>When <code>TITILER_ENDPOINT</code> environement is set (pointing the <code>raster</code> application), additional endpoints will be added to the stac-fastapi application (see: stac/extension.py):</p> <ul> <li><code>/collections/{collectionId}/items/{itemId}/tilejson.json</code>: Return the <code>raster</code> tilejson for an item</li> <li><code>/collections/{collectionId}/items/{itemId}/viewer</code>: Redirect to the <code>raster</code> viewer</li> </ul> <p> <p>STAC Search viewer</p> </p> <p>Code: /runtime/eoapi/stac</p>"},{"location":"#raster-tiles","title":"Raster Tiles","text":"<p>The dynamic tiler deployed within eoAPI is built on top of titiler-pgstac and pgstac. It enables large scale mosaic based on results of STAC searches queries:</p> <ul> <li>Full titiler-pgstac implementation</li> </ul> <p> <p>TiTiler-PgSTAC workflow</p> </p> <p>Code: /runtime/eoapi/raster</p>"},{"location":"#ogc-features-vector-tiles","title":"OGC Features / Vector Tiles","text":"<p>OGC Features + Tiles API built on top of tipg.</p> <p>By default, the API will look for tables in the <code>public</code> schema of the database. We've also added three custom functions which connect to the pgSTAC schema:</p> <ul> <li>pg_temp.pgstac_collections_view: Simple function which return PgSTAC Collections</li> <li>pg_temp.pgstac_hash: Return features for a specific searchId (hash)</li> <li>pg_temp.pgstac_hash_count: Return the number of items per geometry for a specific searchId (hash)</li> </ul> <p>Code: /runtime/eoapi/vector</p>"},{"location":"#project-structure","title":"Project structure","text":"<pre><code> \u251c\u2500\u2500demo/                  - items/collections and notebook\n \u251c\u2500\u2500infrastructure/        - Deployment options (e.g AWS CDK application)\n \u2514\u2500\u2500runtime/eoapi/\n    \u251c\u2500\u2500 raster/            - \"eoapi.raster\" python package\n    \u251c\u2500\u2500 stac/              - \"eoapi.stac\" python package\n    \u2514\u2500\u2500 vector/            - \"eoapi.vector\" (OGC features + OGC tiles) python package\n</code></pre>"},{"location":"#launch-application-locally","title":"Launch application locally","text":"<p>You can launch the APIs locally using docker. This will start 3 services: database, eoapi.stac, eoapi.raster <pre><code>git clone https://github.com/developmentseed/eoAPI.git\ncd eoAPI\ndocker-compose build\ndocker-compose up stac raster\n</code></pre></p> <p>Or install everything locally <pre><code>python -m pip install --upgrade virtualenv\nvirtualenv .venv\nsource .venv/bin/activate\n\npython -m pip install \"psycopg[binary,pool]\" uvicorn\npython -m pip install runtime/eoapi/raster runtime/eoapi/stac runtime/eoapi/vector\n\nexport DATABASE_URL=postgresql://username:password@0.0.0.0:5439/postgis  # Connect to the database of your choice\n\n# OGC Features/Tiles\n.venv/bin/uvicorn eoapi.vector.app:app --port 8000 --reload\n\n# Raster\n.venv/bin/uvicorn eoapi.raster.app:app --port 8000 --reload\n\n# STAC\n.venv/bin/uvicorn eoapi.stac.app:app --port 8000 --reload\n</code></pre></p>"},{"location":"#deployment","title":"Deployment","text":"<p>See DEPLOYMENT.md</p>"},{"location":"#contribution-development","title":"Contribution &amp; Development","text":"<p>See CONTRIBUTING.md</p>"},{"location":"#license","title":"License","text":"<p>See LICENSE</p>"},{"location":"#authors","title":"Authors","text":"<p>Created by Development Seed</p> <p>See contributors for a listing of individual contributors.</p>"},{"location":"#changes","title":"Changes","text":"<p>See CHANGES.md.</p>"},{"location":"contributing/","title":"Development - Contributing","text":"<p>Issues and pull requests are more than welcome: github.com/developmentseed/eoAPI/issues</p> <p>dev install</p> <pre><code># Download the code\ngit clone https://github.com/developmentseed/eoAPI.git\ncd eoAPI\n\n# Create a virtual environment\npython -m pip install --upgrade virtualenv\nvirtualenv .venv\nsource .venv/bin/activate\n\n# Install eoapi modules\npython -m pip install \"psycopg[binary,pool]\"\npython -m pip install -e runtime/eoapi/raster[\"test\"] -e runtime/eoapi/stac[\"test\"] -e runtime/eoapi/vector[\"test\"]\n</code></pre> <p>pre-commit</p> <p>This repo is set to use <code>pre-commit</code> to run isort, ruff, pydocstring, black (\"uncompromising Python code formatter\") and mypy when committing new code.</p> <pre><code>$ pre-commit install\n</code></pre>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#010-tbd","title":"0.1.0 (TBD)","text":"<p>Initial release</p>"}]}